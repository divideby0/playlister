package com.github.divideby0.spotfire

import org.optaplanner.core.api.score.buildin.bendable.BendableScoreHolder;
import com.github.divideby0.spotfire.domain.*;
import java.util.List;
import java.util.Set;
//import com.github.divideby0.spotfire.solver.TransitionUtils;

global BendableScoreHolder scoreHolder;

declare ArtistGenre
  genre: SpotifyGenre
  artist: SpotifyArtist
end

declare GenreGap
    genre: SpotifyGenre
    lastPosition: Integer
    nextPosition: Integer
    length: Integer
end

rule "add ArtistGenre records"
    when
    $genre: SpotifyGenre()
    $artist: SpotifyArtist($genre memberOf genres)
    not ArtistGenre(artist == $artist, genre == $genre)

    then
    ArtistGenre ta = new ArtistGenre();
    ta.setArtist($artist);
    ta.setGenre($genre);
    insert(ta);
end

rule "detect genre gaps"
    no-loop
    when
    $artist: SpotifyArtist()
    PlaylistTrack(
        track != null,
        $t1: track,
        $p1: position
    )
    ArtistGenre(
        artist == $artist,
        track == $t1
    )
    PlaylistTrack(
        track != null,
        position > $p1,
        $t2: track,
        $p2: position,
        $gapLength: position - $p1 + 1
    )
    TrackArtist(
        artist == $artist,
        track == $t2
    )
    not ArtistGap(
       artist == $artist,
       lastPosition == $p1,
       length <= $gapLength
    )

    then
    ArtistGap gap = new ArtistGap();
    gap.setArtist($artist);
    gap.setLastPosition($p1);
    gap.setNextPosition($p2);
    gap.setLength($p2 - $p1 + 1);
//    System.out.println("artist: " + $artist.getName() + ", length: " + gap.getLength());
    insertLogical(gap);
end

//rule "remove stale artist gaps"
//    when
//    $gap: ArtistGap(
//        $artist: artist,
//        $last: lastPosition,
//        $next: nextPosition
//    )
//    PlaylistTrack(
//        track != null,
//        position > $last,
//        position < $next,
//        $track: track
//    )
//    TrackArtist(
//        artist == $artist,
//        track == $track
//    )
//
//    then
//    retract($gap);
//end

rule "should distribute artist throughout paylist"
    when
    $artist: SpotifyArtist()
    $allTrackCount: Number(intValue() > 0) from accumulate(
        $track: SpotifyTrack(),
        count($track)
    )
    $artistTrackCount: Number(intValue() > 0) from accumulate(
        $ta: TrackArtist(artist == $artist),
        count($ta)
    )
    $gap: ArtistGap(
        artist == $artist,
        length < Math.min(30, Math.ceil($allTrackCount / $artistTrackCount)),
        $gapLength: length
    )

    then
//    System.out.println("artist: " + $gap.getArtist().getName() + ", length: " + $gapLength.intValue());
    Double frequency = $allTrackCount.doubleValue() / $artistTrackCount.doubleValue();
    Double penalty = -Math.pow($gapLength.doubleValue()-frequency, 2.0D);
    scoreHolder.addSoftConstraintMatch(kcontext, 0, penalty.intValue());
end