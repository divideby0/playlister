package com.github.divideby0.spotfire

import org.optaplanner.core.api.score.buildin.bendable.BendableScoreHolder;
import com.github.divideby0.spotfire.domain.*;
import java.util.List;
import java.util.Set;
import com.wrapper.spotify.enums.Modality;
//import com.github.divideby0.spotfire.solver.TransitionUtils;

global BendableScoreHolder scoreHolder;

declare TrackValueChange
    currentTrack: SpotifyTrack
    previousTrack: SpotifyTrack
    position: Integer
    tempoChange: Float
    tempoAbsoluteChange: Float
    danceabilityChange: Float
    valenceChange: Float
end

rule "set tempo change"
    when
    PlaylistTrack(
        track != null,
        previousTrack != null,
        $position: position,
        $currentTrack: track,
        $previousTrack: previousTrack
    )
    not TrackValueChange(
        currentTrack == $currentTrack,
        previousTrack == $previousTrack,
        position == $position
    )

    then
    TrackValueChange change = new TrackValueChange();
    change.setCurrentTrack($currentTrack);
    change.setPreviousTrack($previousTrack);
    change.setPosition($position);
    change.setTempoChange($currentTrack.getStartTempo() - $previousTrack.getEndTempo());
    change.setTempoAbsoluteChange(Math.abs($currentTrack.getStartTempo() - $previousTrack.getEndTempo()));
    change.setDanceabilityChange($currentTrack.getStartTempo() - $previousTrack.getEndTempo());
    change.setValenceChange($currentTrack.getValence() - $previousTrack.getValence());
    insert(change);
end

rule "clear tempo change if current track not assigned"
    when
    $tvc: TrackValueChange(
        $currentTrack: currentTrack,
        $previousTrack: previousTrack,
        $position: position
    )
    not PlaylistTrack(
        position == $position,
        track == $currentTrack,
        previousTrack == $previousTrack
    )

    then
    retract($tvc);
end

rule "tempo change should not exceed 30 bpm"
    when
    TrackValueChange(
        tempoAbsoluteChange > 30,
        $change: tempoAbsoluteChange
    )

    then
//    System.out.println("tempo change: " + $tempoChange);
    Integer penalty = Double.valueOf((30 - $change)*10).intValue();
    scoreHolder.addSoftConstraintMatch(kcontext, 3, penalty);
end

rule "should not drastically reduce danceability"
    when
    TrackValueChange(
        danceabilityChange < -0.3,
        $change: danceabilityChange
    )

    then
    Integer penalty = -Double.valueOf((0.3 - $change)*100).intValue();
    scoreHolder.addSoftConstraintMatch(kcontext, 4, penalty);
end